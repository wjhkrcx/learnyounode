var http=require("http");
module.exports.httpGetAsyncBackSync=httpGetAsyncBackSync;//异步提交但同步返回,最后一个是回调函数用于处理接收的数据
function httpGetAsyncBackSync(){
  var count=arguments.length-1;
  if (typeof arguments[count]!="function") {
    console.error("last parameter must be a function,example:function XXX (err,data) ");
    return;
  }
  var dataRs=[];
  for (var i = 0; i < count; i++) {
    dataRs[i]=[false,""];//数组在此处初始化数据
    getasync(arguments[i],i,dataRs,count,arguments[count]);
  }
}

function getasync(url,index,dataRs,count,func){
  http.get(url,callback);
  function callback(response){
    //dataRs[index]=[false,""];//若在此处初始化数据会因为异步多线程产生不可预知的错误
    response.on("data",function(data){dataRs[index][1]+=data;});
    response.on("end",function(){dataRs[index][0]=true;dataSyncReturn(dataRs,count,func);});
    response.on("error",function(error){console.error();});
  }
}

function dataSyncReturn(dataRs,count,func){
  if (dataRs.length!=count) {return; }
  for (var i = 0; i < dataRs.length; i++) {
    if (!dataRs[i][0]) {
      return;
    }
  }
  var data=[];
  for (var j = 0; j < dataRs.length; j++) {
    data[j]=dataRs[j][1];
  }
  func("",data);
}
